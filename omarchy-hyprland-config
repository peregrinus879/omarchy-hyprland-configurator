#!/usr/bin/env bash
set -euo pipefail

#==============================================================================
# Omarchy Hyprland Configurator v3.0
# Smart configuration management with merge capabilities
# Repository: https://github.com/peregrinus879/omarchy-hyprland-configurator
#==============================================================================

#==============================================================================
# CONFIGURATION
#==============================================================================
readonly SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly CONFIG_DIR="$SCRIPT_DIR/configs"
readonly TARGET_DIR="$HOME/.config/hypr"
readonly BACKUP_DIR="$HOME/.config/hypr/.backups"

readonly VERSION="3.0"
readonly VERSION_DATE="2025-09-24"

#==============================================================================
# COLORS
#==============================================================================
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

#==============================================================================
# LOGGING
#==============================================================================
log() {
  local level=$1
  shift
  case "$level" in
  info) echo -e "${BLUE}[INFO]${NC} $*" ;;
  success) echo -e "${GREEN}[SUCCESS]${NC} $*" ;;
  warning) echo -e "${YELLOW}[WARNING]${NC} $*" ;;
  error)
    echo -e "${RED}[ERROR]${NC} $*"
    return 1
    ;;
  step) echo -e "\n${CYAN}${BOLD}=== $* ===${NC}" ;;
  esac
}

#==============================================================================
# UTILITIES
#==============================================================================
count_configs() {
  local dir=$1
  find "$dir" -maxdepth 1 -name "*.conf" -type f 2>/dev/null | wc -l
}

reload_hyprland() {
  if command -v hyprctl >/dev/null 2>&1; then
    if hyprctl reload >/dev/null 2>&1; then
      log success "Hyprland reloaded"
    else
      log warning "Failed to reload - try: hyprctl reload"
    fi
  fi
}

#==============================================================================
# BACKUP OPERATIONS
#==============================================================================
create_backup() {
  local timestamp=$(date +%Y%m%d_%H%M%S)
  local backup_path="$BACKUP_DIR/backup_${timestamp}"

  mkdir -p "$backup_path"

  # Simple backup using find
  find "$TARGET_DIR" -maxdepth 1 -name "*.conf" -type f \
    -exec cp {} "$backup_path/" \; 2>/dev/null

  local count=$(ls "$backup_path"/*.conf 2>/dev/null | wc -l)

  if [[ $count -gt 0 ]]; then
    log success "Backed up $count file(s)"
    # Keep only last 5 backups
    ls -dt "$BACKUP_DIR"/backup_* 2>/dev/null | tail -n +6 | xargs -r rm -rf
  else
    log warning "No files to backup"
    rmdir "$backup_path" 2>/dev/null || true
  fi
}

#==============================================================================
# MAIN OPERATIONS
#==============================================================================

# Option 1: Merge and apply configurations
apply_with_merge() {
  log step "Merging and Applying Configurations"

  create_backup

  log info "Processing your config files..."

  # Process only YOUR config files
  for repo_file in "$CONFIG_DIR"/*.conf; do
    [[ -f "$repo_file" ]] || continue
    local filename=$(basename "$repo_file")
    local system_file="$TARGET_DIR/$filename"
    local temp_file="/tmp/$filename.merged"

    log info "Processing: $filename"

    # Start with your version
    cp "$repo_file" "$temp_file"

    # If omarchy has this file, add its version as comments
    if [[ -f "$system_file" ]]; then
      {
        cat "$temp_file"
        echo ""
        echo "## ============================================"
        echo "## OMARCHY DEFAULTS BELOW (for reference)"
        echo "## Uncomment any you want to use"
        echo "## ============================================"
        sed 's/^[^#]/# &/' "$system_file"
      } >"$temp_file.new"
      mv "$temp_file.new" "$temp_file"
    fi

    # Apply to both repo and system
    cp "$temp_file" "$repo_file"
    cp "$temp_file" "$TARGET_DIR/$filename"
    rm -f "$temp_file"

    log success "Merged: $filename"
  done

  local processed=$(ls "$CONFIG_DIR"/*.conf 2>/dev/null | wc -l)
  log success "Processed $processed file(s)"
  log info "Other omarchy configs remain untouched"

  reload_hyprland
}

# Option 2: Pull all configs from system to repo
pull_from_system() {
  log step "Pulling System Configs to Repository"

  log info "This will copy ALL configs from system to repo"
  read -p "Continue? (y/N): " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    log info "Cancelled"
    return
  fi

  # Simple copy all configs
  cp "$TARGET_DIR"/*.conf "$CONFIG_DIR/" 2>/dev/null

  local count=$(count_configs "$CONFIG_DIR")
  log success "Pulled $count file(s) to repository"
  log info "Review changes: git diff"
  log info "Commit: git add configs/ && git commit"
}

# Option 3: Show differences
show_differences() {
  log step "Configuration Differences"

  log info "Comparing configurations..."
  echo ""

  # Use diff to compare directories
  local diff_output=$(diff -q "$CONFIG_DIR" "$TARGET_DIR" 2>/dev/null | grep "\.conf\|Only in")

  if [[ -z "$diff_output" ]]; then
    log success "All configurations are identical!"
  else
    while IFS= read -r line; do
      if [[ "$line" =~ Files.*differ ]]; then
        local filename=$(echo "$line" | sed -n 's/.*\/\(.*\.conf\) and.*/\1/p')
        log warning "$filename: Different"
        # Show brief diff
        diff --color=auto -u "$CONFIG_DIR/$filename" "$TARGET_DIR/$filename" 2>/dev/null | head -10 || true
        echo ""
      elif [[ "$line" =~ "Only in $CONFIG_DIR" ]]; then
        local filename=$(echo "$line" | sed 's/.*: //')
        log warning "$filename: Only in repository"
      elif [[ "$line" =~ "Only in $TARGET_DIR" ]]; then
        local filename=$(echo "$line" | sed 's/.*: //')
        log info "$filename: Only in system"
      fi
    done <<<"$diff_output"
  fi

  # Summary
  local repo_count=$(count_configs "$CONFIG_DIR")
  local system_count=$(count_configs "$TARGET_DIR")
  echo ""
  log info "Summary: $repo_count files in repo, $system_count files in system"
}

#==============================================================================
# STATUS
#==============================================================================
show_status() {
  log step "Configuration Status"

  # Check Hyprland
  if command -v hyprctl >/dev/null 2>&1; then
    if hyprctl version >/dev/null 2>&1; then
      log success "Hyprland is running"
    else
      log info "Hyprland installed but not running"
    fi
  else
    log warning "Hyprland not found"
  fi

  # File counts
  local repo_count=$(count_configs "$CONFIG_DIR")
  local system_count=$(count_configs "$TARGET_DIR")

  echo ""
  log info "Repository: $repo_count config files"
  log info "System: $system_count config files"

  # Quick diff check
  if diff -q "$CONFIG_DIR" "$TARGET_DIR" >/dev/null 2>&1; then
    log success "Configurations are synchronized"
  else
    log warning "Configurations differ - run --sync to see details"
  fi

  # Backup info
  if [[ -d "$BACKUP_DIR" ]]; then
    local backups=$(ls -d "$BACKUP_DIR"/backup_* 2>/dev/null | wc -l)
    [[ $backups -gt 0 ]] && log info "Backups available: $backups"
  fi
}

#==============================================================================
# SYNC MENU
#==============================================================================
sync_menu() {
  log step "Smart Sync"

  # Show current state
  local repo_count=$(count_configs "$CONFIG_DIR")
  local system_count=$(count_configs "$TARGET_DIR")

  echo ""
  log info "Repository: $repo_count config files"
  log info "System: $system_count config files"

  echo ""
  echo "What would you like to do?"
  echo "  1) Apply my configs + merge omarchy defaults (fresh install/updates)"
  echo "  2) Pull my edits from system to repo"
  echo "  3) Show differences"
  echo "  4) Cancel"
  echo ""
  read -p "Choice [1-4]: " choice

  case "$choice" in
  1) apply_with_merge ;;
  2) pull_from_system ;;
  3) show_differences ;;
  4) log info "Cancelled" ;;
  *) log error "Invalid choice" ;;
  esac
}

#==============================================================================
# HELP
#==============================================================================
show_help() {
  cat <<EOF
${BOLD}Omarchy Hyprland Configurator v${VERSION}${NC}
Smart configuration management with merge capabilities

${BOLD}USAGE:${NC}
  $SCRIPT_NAME [COMMAND]

${BOLD}COMMANDS:${NC}
  --sync      Interactive sync menu
  --status    Show current status
  --backup    Create manual backup
  --help      Show this help

${BOLD}WORKFLOW:${NC}
  Fresh install or omarchy updates:
    --sync → Option 1 (merge and apply)
    
  After editing configs:
    --sync → Option 2 (pull to repo)
    
  Check differences:
    --sync → Option 3 (show diff)
  
${BOLD}DIRECTORIES:${NC}
  Repository: $CONFIG_DIR
  System:     $TARGET_DIR
  Backups:    $BACKUP_DIR

${BOLD}VERSION:${NC} $VERSION ($VERSION_DATE)
EOF
}

#==============================================================================
# MAIN
#==============================================================================
main() {
  # Check prerequisites
  if [[ ! -d "$CONFIG_DIR" ]]; then
    log error "No configs/ directory found!"
    log info "Create it and add your Hyprland configs"
    exit 1
  fi

  # Ensure directories exist
  mkdir -p "$TARGET_DIR" "$BACKUP_DIR"

  # Process command
  case "${1:-}" in
  --sync) sync_menu ;;
  --status) show_status ;;
  --backup) create_backup ;;
  --version) echo "Version $VERSION ($VERSION_DATE)" ;;
  --help | *) show_help ;;
  esac
}

# Execute
main "$@"
